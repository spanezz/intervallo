#!/usr/bin/python3

# Given image files on input, generates a video in the style of Intervallo RAI.
# For audio, you can use https://archive.org/details/IntervalloRai-Paradisi

import argparse
import os
import PIL
import PIL.ImageFont, PIL.ImageDraw, PIL.ImageFilter, PIL.ImageEnhance
import subprocess
import tempfile
import shlex

class Frame:
    def __init__(self, size, src_pathname):
        self.size = size
        self.src_pathname = src_pathname

        if os.path.exists(self.src_pathname + ".txt"):
            with open(self.src_pathname + ".txt", "rt") as fd:
                self.subtitle = [x.strip() for x in fd.readlines()]
        else:
            self.subtitle = [os.path.splitext(os.path.basename(self.src_pathname))[0]]

        self.frame_img = None
        self.frame_pathname = None

    def __del__(self):
        if self.frame_pathname is not None:
            os.unlink(self.frame_pathname)

    def text_frame(self, font):
        # Draw the subtitle on the image
        txtimg = PIL.Image.new("RGBA", self.size, (0, 0, 0, 0))
        draw = PIL.ImageDraw.Draw(txtimg)
        subtitles = [(line, draw.textsize(line, font)) for line in self.subtitle]
        y = self.size[1] - 50
        for line, size in subtitles[::-1]:
            y -= size[1] + 10
            draw.text(((self.size[0] - size[0]) / 2, y), line, fill=(200, 200, 200), font=font)
            # Draw it again a bit offset, then blur, to simulate text being slightly out of focus
            draw.text(((self.size[0] - size[0]) / 2 + 1, y + 1), line, fill=(200, 200, 200), font=font)
        txtimg = txtimg.filter(PIL.ImageFilter.GaussianBlur(radius=1))
        return txtimg

    def vignette_effect(self, img):
        """
        Return a copy of img with a vignetting effect applied to it
        """
        vignette = PIL.Image.new("L", img.size, "black")
        vignette_draw = PIL.ImageDraw.Draw(vignette)
        vignette_draw.ellipse(((0, 0), vignette.size), fill="white")
        vignette = vignette.filter(PIL.ImageFilter.GaussianBlur(radius=100))
        black = PIL.Image.new("RGB", vignette.size, "black")
        return PIL.Image.composite(img, black, vignette)

    def to_frame(self, font, bw=False):
        src = PIL.Image.open(self.src_pathname)

        # Scale the image to our frame size
        src.thumbnail(self.size, PIL.Image.ANTIALIAS)

        # Add vignette effect
        src = self.vignette_effect(src)

        # Image with black background
        img = PIL.Image.new("RGBA", self.size, "black")

        # Center the source image over the black background
        img.paste(src, (((self.size[0] - src.size[0]) // 2), ((self.size[1] - src.size[1]) // 2)))

        # Draw the subtitle on the image
        img = PIL.Image.alpha_composite(img, self.text_frame(font))

        if bw:
            # Convert to to grayscale
            img = img.convert("LA")
        else:
            # Desaturate
            desaturate = PIL.ImageEnhance.Color(img)
            img = desaturate.enhance(0.5)

        if False:
            img.show()
            import sys
            sys.exit(1)

        return img

    def write_frame(self, font, bw=False):
        self.frame_img = self.to_frame(font, bw)
        with tempfile.NamedTemporaryFile(mode="wb", dir=".", suffix=".png", delete=False) as f:
            self.frame_img.save(f.name)
            self.frame_pathname = os.path.basename(f.name)
        return self.frame_pathname


class Intervallo:
    def __init__(self, font, audio, duration, output, bw):
        self.font = PIL.ImageFont.truetype(font, 40)
        self.audio_pathname = audio
        self.output_pathname = output
        self.frame_x = 704
        self.frame_y = 576
        self.frame_size = (self.frame_x, self.frame_y)
        self.duration = duration
        self.bw = bw
        self.files = []

    def get_subtitle(self, pathname):
        return os.path.splitext(os.path.basename(pathname))[0]

    def process(self, files):
        has_audio = bool(self.audio_pathname)

        frames = [Frame(self.frame_size, f) for f in files]
        for f in frames:
            f.write_frame(self.font, self.bw)

        # See http://superuser.com/questions/833232/create-video-with-5-images-with-fadein-out-effect-in-ffmpeg
        cmd = ["ffmpeg", "-y"]
        for idx, f in enumerate(frames):
            cmd += ["-loop", "1", "-t", str(self.duration), "-i", f.frame_pathname]
        with tempfile.NamedTemporaryFile(mode="wt", dir=".", suffix=".txt") as script:
            # Build the transitions
            concat = []
            for idx in range(len(frames) - 1):
                print("[{next}:v][{prev}:v]blend=all_expr='A*(if(gte(T,0.5),1,T/0.5))+B*(1-(if(gte(T,0.5),1,T/0.5)))'[t{prev}];".format(prev=idx, next=idx+1), file=script)
                concat.append("[{prev}:v][t{prev}]".format(prev=idx))
            concat.append("[{}:v]".format(len(frames) - 1))
            concat.append("concat=n={count}:v=1:a=0,format=yuv420p[v]".format(count=len(frames) * 2 - 1))
            print("".join(concat), file=script)
            cmd += ["-filter_complex_script", os.path.basename(script.name)]

            script.flush()

            with tempfile.NamedTemporaryFile(mode="wb", dir=".", suffix=".mp4", delete=has_audio) as mute:
                cmd += ["-map", "[v]", mute.name]
                subprocess.check_call(cmd)

                if has_audio:
                    cmd = ["ffmpeg", "-y", "-i", mute.name, "-i", self.audio_pathname, "-codec", "copy", "-shortest", self.output_pathname]
                    subprocess.check_call(cmd)
                else:
                    os.rename(mute.name, self.output_pathname)


def main():
    parser = argparse.ArgumentParser(description="Create an Intervallo RAI out of a collection of images.")
    parser.add_argument("--font", metavar="file.ttf", default="lmromandemi10-regular.otf", help="Font to use for subtitles")
    parser.add_argument("--audio", metavar="file.mp3", help="Audio track")
    parser.add_argument("--duration", metavar="sec", type=int, default=5, help="Time for each image in seconds")
    parser.add_argument("--bw", action="store_true", help="Black and white instead of desaturated colours")
    parser.add_argument("-o", "--output", metavar="pathname", default="intervallo.mp4", help="Output file name")
    parser.add_argument("imgfile", nargs="+", help="input image files")
    args = parser.parse_args()

    proc = Intervallo(font=args.font, audio=args.audio, duration=args.duration, output=args.output, bw=args.bw)
    proc.process([x for x in args.imgfile if not x.endswith(".txt")])


if __name__ == "__main__":
    main()

